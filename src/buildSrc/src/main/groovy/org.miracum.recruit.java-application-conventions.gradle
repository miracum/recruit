/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'org.miracum.recruit.java-common-conventions'

    id 'org.springframework.boot'

    id 'io.spring.dependency-management'

    id 'com.google.cloud.tools.jib'

    id 'jacoco'

    id 'com.diffplug.spotless'

    id 'io.freefair.lombok'

    id 'de.undercouch.download'

    id 'checkstyle'
}

task downloadOpenTelemetryJavaAgent(type: Download) {
    src 'https://github.com/open-telemetry/opentelemetry-java-instrumentation' +
        '/releases/download/v2.4.0/opentelemetry-javaagent.jar'
    dest '../'
    overwrite false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    implementation 'ca.uhn.hapi.fhir:hapi-fhir-client:7.6.1'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-base:7.6.1'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:7.6.1'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-client-okhttp:7.6.1'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    implementation 'net.logstash.logback:logstash-logback-encoder:8.0'

    implementation 'org.postgresql:postgresql:42.7.5'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.14.5'
    implementation 'io.micrometer:micrometer-core:1.14.5'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

test {
    useJUnitPlatform()
}

jar {
    enabled = false
}

bootJar {
    layered {
        application {
            intoLayer("spring-boot-loader") {
                include("org/springframework/boot/loader/**")
            }
            intoLayer("application")
        }
        dependencies {
            intoLayer("module-dependencies") {
                include("org.miracum:*:*")
            }
            intoLayer("dependencies")
        }
        layerOrder = [ "dependencies", "spring-boot-loader", "module-dependencies", "application" ]
    }
}

jacoco {
    toolVersion '0.8.12'
}

jacocoTestReport {
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        toggleOffOn()
    }
}

checkstyle {
    toolVersion '10.21.4'
    configFile = file('../config/checkstyle/checkstyle.xml')
}

jib {
    from {
        image = 'gcr.io/distroless/java21-debian12:nonroot' +
            '@sha256:0ba7333a0fb7cbcf90b18073132f4f445870608e8cdc179664f10ce4d00964c2'
    }
    to {
        image = "ghcr.io/miracum/recruit/${project.name}:${project.version}"
    }
    container {
        // when using the 'OCI' image format, the build tar can not be loaded via `docker load`
        // so to work with CI, the format has to be Docker.
        format = 'Docker'
        user = '65532:65532'
        ports = ['8080/tcp', '8081/tcp']
        workingDirectory = '/app'
        environment = [
            'SPRING_PROFILES_ACTIVE': 'prod',
        ]
        labels = [
            'org.opencontainers.image.source': 'https://github.com/miracum/recruit',
            'org.opencontainers.image.vendor': 'miracum.org',
            'org.opencontainers.image.authors': 'miracum.org',
            'org.opencontainers.image.url': 'https://miracum.github.io/recruit/',
            'org.opencontainers.image.documentation': 'https://miracum.github.io/recruit/',
            'org.opencontainers.image.version': project.version,
            'org.opencontainers.image.licenses': 'AGPL-3.0',
            'org.opencontainers.image.description':
                "Container image for the ${project.name} module of the recruIT infrastructure",
            'org.opencontainers.image.title': project.name,
            'org.opencontainers.image.base.name': jib.from.image.split('@')[0],
            'org.opencontainers.image.base.digest': jib.from.image.split('@')[1],
            // don't use this label since it changes every time causing the image digest to change as well,
            // making reproducible builds impossible
            // 'org.opencontainers.image.created': new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX")
        ]
    }
    extraDirectories {
        paths {
            path {
                from = '..'
                into = '/app'
                includes = ['opentelemetry-javaagent.jar']
            }
        }
    }
}
