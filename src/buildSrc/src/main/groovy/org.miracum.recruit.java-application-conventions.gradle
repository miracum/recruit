/*
 * This file was generated by the Gradle "init" task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id "org.miracum.recruit.java-common-conventions"

    id "org.springframework.boot"

    id "io.spring.dependency-management"

    id "com.google.cloud.tools.jib"

    id "jacoco"

    id "com.diffplug.spotless"

    id "io.freefair.lombok"

    id "de.undercouch.download"
}

task downloadOpenTelemetryJavaAgent(type: Download) {
    src "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.17.0/opentelemetry-javaagent.jar"
    dest "../"
    overwrite false
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc"

    implementation "ca.uhn.hapi.fhir:hapi-fhir-base:6.0.4"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-client:6.0.4"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-structures-r4:6.0.4"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-client-okhttp:6.0.4"

    implementation "com.squareup.okhttp3:okhttp:3.14.9"

    implementation "net.logstash.logback:logstash-logback-encoder:7.2"

    implementation "org.postgresql:postgresql:42.4.1"

    implementation "io.micrometer:micrometer-registry-prometheus:1.9.3"
    implementation "io.micrometer:micrometer-core:1.9.3"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    testImplementation "org.springframework.boot:spring-boot-starter-test"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

test {
    useJUnitPlatform()
}

jar {
    enabled = false
}

jacoco {
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled true
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        toggleOffOn()
    }
}


jib {
    from {
        image = "gcr.io/distroless/java17-debian11:nonroot@sha256:f647b6ae9e3254dc9e766c4a767abe99d59f7d52fa9e0b9fe2d7db7281cb6d63"
    }
    to {
        image = "ghcr.io/miracum/recruit/${project.name}:${project.version}"
    }
    container {
        format = "OCI"
        user = "65532:65532"
        ports = ["8080/tcp", "8081/tcp"]
        environment = [
            "SPRING_PROFILES_ACTIVE": "prod",
            "APP_VERSION": project.version
        ]
        labels = [
            "org.opencontainers.image.source": "https://github.com/miracum/recruit",
            "org.opencontainers.image.vendor": "miracum.org",
            "org.opencontainers.image.authors": "miracum.org",
            "org.opencontainers.image.url": "https://miracum.github.io/recruit/",
            "org.opencontainers.image.documentation": "https://miracum.github.io/recruit/",
            "org.opencontainers.image.version": project.version,
            "org.opencontainers.image.licenses": "AGPL-3.0",
            "org.opencontainers.image.description": "Container image for the ${project.name} module of the recruIT infrastructure",
            "org.opencontainers.image.title": project.name,
            "org.opencontainers.image.base.name": jib.from.image.split("@")[0],
            "org.opencontainers.image.base.digest": jib.from.image.split("@")[1],
            "org.opencontainers.image.created": new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX")
        ]
    }
    extraDirectories {
        paths {
            path {
                from = ".."
                into = "/app"
                includes = ["opentelemetry-javaagent.jar"]
            }
        }
    }
}
