name: "build container image"

permissions: {}

on:
  workflow_call:
    inputs:
      module-name:
        description: "Name of the project inside the /src/ dir"
        type: string
        required: true
      context:
        description: "the docker build context path"
        type: string
        default: .
        required: false
    outputs:
      image-tag:
        description: "The image tag that was built"
        value: ${{ jobs.build.outputs.tag }}

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/${{ inputs.module-name }}

jobs:
  build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-22.04
    outputs:
      image: ${{ env.IMAGE_NAME }}
      digest: ${{ steps.build.outputs.digest }}
      tag: ${{ steps.container_meta.outputs.version }}
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Container meta
        id: container_meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.created=1970-01-01T00:00:00Z

      - name: Build image
        id: build
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=inline
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_meta.outputs.tags }}
          labels: ${{ steps.container_meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}
          context: ${{ inputs.context }}
          build-args: |
            MODULE_NAME=${{ inputs.module-name }}

      - name: Run unit tests
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          target: test
          context: ${{ inputs.context }}
          build-args: |
            MODULE_NAME=${{ inputs.module-name }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@fd25fed6972e341ff0007ddb61f77e88103953c2 # 0.21.0
        with:
          image-ref: ${{ fromJson(steps.container_meta.outputs.json).tags[0] }}
          severity: "CRITICAL"
          exit-code: "1"
          ignore-unfixed: "true"
          timeout: 15m

      - name: Save Trivy vulnerability attestation
        uses: aquasecurity/trivy-action@fd25fed6972e341ff0007ddb61f77e88103953c2 # 0.21.0
        with:
          image-ref: ${{ fromJson(steps.container_meta.outputs.json).tags[0] }}
          exit-code: "0"
          format: cosign-vuln
          output: trivy-vuln-attestation.json
          timeout: 15m

      - name: Upload image vulnerability attestation
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ inputs.module-name }}-attestations
          path: |
            trivy-vuln-attestation.json

      - name: Save container image as tar archives
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        env:
          IMAGE: ${{ fromJson(steps.container_meta.outputs.json).tags[0] }}
        run: |
          docker save "$IMAGE" -o /tmp/${{ inputs.module-name }}-image.tar

      - name: Upload container image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ inputs.module-name }}-build-artifacts
          path: |
            /tmp/${{ inputs.module-name }}-image.tar

  provenance:
    needs:
      - build
    permissions:
      actions: read
      # for creating OIDC tokens for signing.
      id-token: write
      packages: write # for uploading attestations.
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  sign:
    name: sign image
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      IMAGE: "${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}"
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download attestations
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: ${{ inputs.module-name }}-attestations
          path: /tmp

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Sign image
        run: |
          echo "Signing '$IMAGE' using keyless approach"
          cosign sign --yes "$IMAGE"

      - name: Attest image vulnerability report
        run: |
          echo "Attest vulnerability report for '$IMAGE' using keyless approach"
          cosign attest --yes --type vuln --predicate /tmp/trivy-vuln-attestation.json "$IMAGE"
